apply plugin: 'scala'
apply plugin: 'idea'

sourceCompatibility = 1.7
version = '0.1'
jar {
    manifest {
        attributes 'Implementation-Title': 'uber-mayhem-application', 'Implementation-Version': version, 'Main-Class': 'Application'
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    compile project(':core')
    compile project(':util')
    compile 'org.slf4j:slf4j-api:1.7.5'
    compile "org.scala-lang:scala-library:2.10.4"
    compile "org.scala-lang:scala-compiler:2.10.4"
    compile "org.lwjgl.lwjgl:lwjgl:2.9.1"
    compile "org.lwjgl.lwjgl:lwjgl_util:2.9.1"
    testCompile "junit:junit:4.11"
}

def getPlatform = {
    if (System.properties['os.name'].toLowerCase().contains('windows'))
        'windows'
    else if (System.properties['os.name'].toLowerCase().contains('linux'))
        'linux'
    else if (System.properties['os.name'].toLowerCase().contains('osx'))
        'osx'
}

task run(type: JavaExec, dependsOn: [classes, 'natives']) {
    main = 'Application'
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime

    def platform = getPlatform()
    println("Detected platform: $platform")
    systemProperty 'java.library.path', file( "build/natives/$platform" )
}

def platforms = ['windows', 'linux', 'osx']
platforms.each { platform ->
    task "${platform}Natives" {
        def outputDir = "$buildDir/natives/$platform"
        inputs.files(configurations.compile)
        outputs.dir(outputDir)
        doLast {
            copy {
                def artifacts = configurations.compile.resolvedConfiguration.resolvedArtifacts
                        .findAll { it.classifier == "natives-$platform" }
                artifacts.each {
                    from zipTree(it.file)
                }
                into outputDir
            }
        }
    }
}

task natives {
    dependsOn platforms.collect { "${it}Natives" }.findAll { tasks[it] }
}
